@startuml





/' Objects '/

class Bank {
	+Bank()
	+~Bank()
}


class BlackjackButton {
	+BlackjackButton(const QString& text, QWidget* parent)
}


class Card {
	+Card()
	+Card(const Card& card)
	+~Card()
	-color : Color
	-number : Number
	+Get_Color() : int {query}
	+Get_Number() : int {query}
	+Get_Value() : int {query}
	+operator<<(std::ostream& os, const Card& c) : std :: ostream&
	+Get_Color_string() : std::string {query}
	+Get_Name() : std::string {query}
	+Get_Number_string() : std::string {query}
	+Set_Color(Color color) : void
	+Set_Number(Number number) : void
}


class DeckCards {
	+DeckCards()
	+~DeckCards()
	+Get_Random_Card() : std::shared_ptr<Card>
	#deck_cards : std::vector<std::shared_ptr<Card>>
}


class Game {
	+Game()
	+Game(DeckCards* deck)
	+~Game()
	-bank : Bank
	-deck : DeckCards*
	+state : GameState
	-player : Player
	+State_Finish() : bool
	+gameFinished(bool youWin) : signals : void
	+Get_Bank_Cards() : std::vector<std::shared_ptr<Card>> {query}
	+Get_Player_Cards() : std::vector<std::shared_ptr<Card>> {query}
	+Display_Game() : void {query}
	+Display_Result() : void
	+Next_Step() : void
	+Start_Game() : void
	+State_BankTurn() : void
	+State_DealingCards() : void
	+State_Init() : void
	+State_PlayerTurn(const char c) : void
}


class Person {
	+Person()
	+~Person()
	+Get_Number_Cards() : int {query}
	+Get_Score() : int {query}
	+operator<<(std::ostream& os, const Person& p) : std :: ostream&
	+Get_Cards() : std::vector<std::shared_ptr<Card>> {query}
	-cards : std::vector<std::shared_ptr<Card>>
	+Add_Card(const std::shared_ptr<Card>) : void
	+EmptyCards() : void
}


class Player {
	+Player()
	+~Player()
}


class ServicesView {
	-addCardFromRight(QHBoxLayout* targetLayout, const QPixmap& pix, View* window) : QParallelAnimationGroup*
	-renderSvg(const std::string name, const QSize& outSize) : QPixmap
	-dealBankSequential(QHBoxLayout* layout, const QVector<QPixmap>& pix, int idx, View* window) : void
	+updatePerson(std::vector<std::shared_ptr<Card>> cards, QHBoxLayout* layout_person, View* window) : void
}


class SignalController {
	+SignalController()
	+~SignalController()
	-game : Game
	-view : View
	-countUpdateFinished : int
	+onEnterPressed() : void
	+onGameFinished(bool youWin) : void
	+onLetterPressed(char value) : void
	+onLetterPressedH() : void
	+onLetterPressedS() : void
	+onTurnFinished() : void
	+updateView() : void
}


class View {
	+View(QWidget* parent)
	+~View()
	+buttonHit : BlackjackButton*
	+buttonNext : BlackjackButton*
	+buttonStand : BlackjackButton*
	-bank_cards : QHBoxLayout*
	-player_cards : QHBoxLayout*
	-background : QPixmap
	-services : ServicesView
	+enterPressed() : signals : void
	#keyPressEvent(QKeyEvent* event) : void
	+letterPressed(char value) : void
	#paintEvent(QPaintEvent*) : void
	+popUpWinner(bool youWin) : void
	+turnFinished() : void
	+updateBank(std::vector<std::shared_ptr<Card>> cards) : void
	+updatePlayer(std::vector<std::shared_ptr<Card>> cards) : void
	+updateState(const GameState state) : void
}


enum Color {
	Club
	Diamond
	Heart
	Spade
}


enum GameState {
	BankTurn
	DealingCards
	Finish
	Init
	PlayerTurn
	PlayerTurnFinished
}


enum Number {
	Eight
	Five
	Four
	Jack
	King
	Nine
	One
	Queen
	Seven
	Six
	Ten
	Three
	Two
}





/' Inheritance relationships '/

Person <|-- Bank


Person <|-- Player





/' Aggregation relationships '/

Card *-- Color


Card *-- Number


DeckCards o-- Card


Game *-- Bank


Game o-- DeckCards


Game *-- GameState


Game *-- Player


Person o-- Card


SignalController *-- Game


SignalController *-- View


View "3" o-- BlackjackButton


View *-- ServicesView






/' Nested objects '/



@enduml
